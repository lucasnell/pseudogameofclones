% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{searcher_sims}
\alias{searcher_sims}
\title{Simulate searchers seeking targets.}
\usage{
searcher_sims(
  d,
  max_t,
  x_size,
  y_size,
  target_xy,
  target_types,
  l_star,
  bias,
  l_int,
  n_stay,
  n_ignore,
  xy0 = NULL,
  randomize_xy0 = TRUE,
  n_searchers = 1L,
  summarize = FALSE,
  show_progress = FALSE,
  n_threads = 1L
)
}
\arguments{
\item{d}{Single numeric indicating search rate of searcher.}

\item{max_t}{Single integer indicating the number of time steps to simulate.}

\item{x_size}{Single numeric indicating x dimension of search area.
Bounds will be \code{c(0, x_size)}.}

\item{y_size}{Single numeric indicating y dimension of search area.
Bounds will be \code{c(0, y_size)}.}

\item{target_xy}{Two-column numeric matrix containing x and y coordinates
for targets.}

\item{target_types}{Integer vector with the same number of items as the
number of rows in \code{target_xy} indicating the type of target each
target is. Targets can vary in their \code{l_star}, \code{l_int}, \code{bias},
\code{n_stay}, and \code{n_ignore} parameters (see descriptions below).
This vector should consist of integers from 1 to the number of items
in the arguments \code{l_star}, \code{l_int}, \code{bias}, \code{n_stay}, and \code{n_ignore}.
It's allowed that some target types don't show up in this vector
since this can be useful for simulations where you remove or replace
target type(s).}

\item{l_star}{List where each element is a numeric vector indicating,
for each target type, the distance(s) from searcher to target that
causes targets to bias searcher movement.
Its length should be equal to the number of unique type(s) of targets.
Target types can have multiple \code{l_star} values if they have, for
example, both a virus that attracts searchers and an epiphytic
bacteria that repels them. If the cues from the virus and bacteria
happen at different spatial scales, then this would result in
multiple \code{l_star} values. It would also result in multiple \code{bias}
values for targets of this type.
For multiple values of \code{l_star} and \code{bias}, it's assumed that they
are ordered the same (i.e., \code{l_star[[i]][[j]]} coincides with
\code{bias[[i]][[j]]}).
It's also required that within the same target type, higher values
of \code{l_star} coincide with lower values of \code{abs(bias)}.}

\item{bias}{List where each item is a numeric vector indicating, for
each target type, the bias(es) the target causes searcher movement
once they're \verb{<= l_star} away from it. Values range from -1 to 1,
with negative values resulting in searchers being repelled.
Values of +1 (-1) cause searchers to move directly towards (away from)
targets once within \code{l_star}.
Values nearer to zero cause movement that is more similar to
a random walk.
Its length should be equal to the number of unique type(s) of targets.
See the description for parameter \code{l_star} for an example of why you
might need multiple \code{bias} values for one target type.}

\item{l_int}{Numeric vector indicating, for each target type,
the distance from searcher to target that causes an interaction.
Its length should be equal to the number of unique type(s) of targets.}

\item{n_stay}{Numeric vector indicating, for each target type,
the number of time steps searchers stay at targets when they interact
with them.
Its length should be equal to the number of unique type(s) of targets.}

\item{n_ignore}{Numeric vector indicating, for each target type,
the number of time steps searchers ignore targets after
interacting with them.
Its length should be equal to the number of unique type(s) of targets.}

\item{xy0}{Numeric vector of length 2 indicating starting x and y
coordinates for searcher(s). When \code{xy0 = NULL} and
\code{randomize_xy0 = FALSE}, searcher(s) start at the middle of the
search space (x = 0, y = 0).
This function throws an error when \code{xy0} is provided and
\code{randomize_xy0 = TRUE} because these are conflicting.
Defaults to \code{NULL}.}

\item{randomize_xy0}{Single logical for whether to randomize starting
coordinates for searcher(s). If \code{TRUE}, x and y coordinates are
generated from a random uniform distribution ranging from the lower
to upper bound for each dimension.
Defaults to \code{TRUE}.}

\item{n_searchers}{Single integer indicating the number of independent
searchers to simulate.
Defaults to \code{1L}.}

\item{summarize}{Single logical for whether to summarize output by
searcher. See below for details on how this changes the output.
Defaults to \code{FALSE}.}

\item{show_progress}{Single logical for whether to show progress bar.
Defaults to \code{FALSE}.}

\item{n_threads}{Single integer for the number of threads to use.
Ignored if \code{n_searchers == 1}.
Defaults to \code{1L}.}
}
\value{
If \code{summarize = FALSE}, then it outputs a tibble with the columns
\code{searcher} (searcher number),
\code{time} (time), \code{x} (x coordinate), \code{y} (y coordinate),
\code{tar} (which target is searcher interacting with (within \code{l_int})?),
\code{type} (which target type is searcher interacting with?),
and
\code{hit} (logical - is searcher interacting with a new target?).
Columns \code{tar} and \code{type} are \code{0} if the searcher is not on any targets.
If \code{summarize = TRUE}, then it outputs a tibble with the columns
\code{searcher} (searcher number),
\code{type} (which target type is searcher interacting with?),
\code{on} (integer - how many time steps did the searcher spend on this
type of target?).
and
\code{hit} (integer - how many times did this searcher interact with
a new target of this type?).
}
\description{
Simulate searchers seeking targets.
}
