---
title: "ABM of attracting and repelling targets"
author: "Lucas A. Nell"
format:
  pdf: default
  html:
    include-in-header: in-line_math_mode.html
number-sections: true
editor: source
date: today
date-format: "D MMM YYYY"
editor_options: 
  chunk_output_type: console
---

\raggedright

```{r}
#| label: setup
#| include: false

suppressPackageStartupMessages({
    library(knitr)
    library(tidyverse)
    library(gganimate)
    library(pseudogameofclones)
    library(kableExtra)
    library(patchwork)
    library(viridisLite)
})
.dev <- "png"
output_format <- opts_knit$get("rmarkdown.pandoc.to")
if (output_format == "html") .dev <- "svg"
if (output_format == "latex") .dev <- "pdf"

opts_chunk$set(echo = FALSE, dev = .dev)

# number of threads:
.n_threads <- max(1L, parallel::detectCores() - 2L)
```

Agent-based model of searchers (aphids) and targets (plants) where some targets attract searchers (virus-infected plants) while others repel them (*Pseudomonas*-infected plants). I am using these more computationally intensive simulations to describe the functional form of interaction rates in response to both attracting and repelling targets.



## Model description

The model starts with sizes for the x and y dimensions ($x_{\text{size}}$ and
$y_{\text{size}}$), and the total landscape is defined by the bounds
$\left[ 0, \, x_{\text{size}} \right]$ and $\left[ 0, \, y_{\text{size}} \right]$.
Because of how target locations are defined (see @sec-targets),
$x_{\text{size}} \ge 2$ and $y_{\text{size}} \ge 2$.
Targets do not move within these bounds, whereas 
searchers move throughout landscape and operate independently from each other.
Once a searcher moves close enough to a target, the target can repel or 
attract them.
These repellent or attractant effects can vary in strength from a mild 
bias (i.e., close to a random walk) to completely directed movement.
Targets can differ in how they bias searcher movement and in the distance
within which they affect searcher movement.
Targets are located along an evenly spaced grid within the landscape
to approximate a field of agricultural crops, and their degree of spatial
overlap can vary.


Once a searcher moves even closer to a target, the searcher interacts with
the target, and the simulations record this event.
In the context of pea aphids and pea plants, an interaction means
an encounter that would allow for potential loading of viruses between
the aphid vector and pea-plant host.
After an interaction occurs, searchers can stay on the target for a number
of time steps (potentially indefinitely).
This would be akin to aphids finding a host plant and staying to feed.
After leaving the target, searchers can ignore that target for a number
of time steps (potentially indefinitely).
This allows searchers to escape the influence of the target to avoid
being repeatedly attracted to the same target.
See @tbl-parameters for parameter descriptions.



### Target locations {#sec-targets}


Targets are located along an evenly spaced integer grid, defined by all 
combinations of
$x \in \left\{ 1, \ldots, \lfloor x_{\text{size}} -1 \rfloor \right\}$ and
$y \in \left\{ 1, \ldots, \lfloor y_{\text{size}} -1 \rfloor \right\}$,
where $\lfloor \cdot \rfloor$ indicates the floor function.
Because the total landscape is defined by the bounds
$\left[ 0, \, x_{\text{size}} \right]$ and $\left[ 0, \, y_{\text{size}} \right]$,
this grid design prevents targets from being located directly on a boundary.
The first target location is sampled randomly from this grid.
Subsequent locations are sampled with weighting affected by targets already
existing on the landscape.
Each target type can increase or decrease the probability that other targets
(same or different types) will be later sampled to a location directly 
next to it.
By increasing (decreasing) the sampling probability of neighboring locations 
for targets of the same type, we increase (decrease) spatial clustering of 
that target type.
By increasing (decreasing) the sampling probability of neighboring locations
for targets of different types, we increase (decrease) spatial overlap
between those types.
Simulations also allow a target to be multiple types.
This is because a plant that hosts an epiphytic bacteria can also be infected
with a virus.
The different target-type effects (i.e., different effects of bacteria and virus)
both affect searchers but do so to a different degree and 
at different spatial scales.
See @fig-target-sims for examples.


```{r}
#| label: fig-target-sims
#| fig.height: 5
#| fig.width: 6.5
#| fig-cap: "Simulations of 1000 bacteria and 1000 virus-containing plants across a $50\\times50$ grid, where different or same types attract or repel. The type not indicated is neutral (i.e., has no effect on sampling)."

# color palette for target types:
type_pal <- c(viridis(3, begin = 0.1, end = 0.9)[c(1,3,2)], "gray80") |> 
    set_names(c("bacteria", "virus", "bacteria + virus", "none"))

list(
    "different types repel" = c(same = 1, diff = 0.1),
    "different types attract" = c(same = 1, diff = 10),
    "same types attract" = c(same = 10, diff = 1),
    "same types repel" = c(same = 0.1, diff = 1)) |>
    imap(\(x, n) {
        wt_mat <- rbind(c(x[["same"]], x[["diff"]]), 
                        c(x[["diff"]], x[["same"]]))
        x_size = 50L
        y_size = 50L
        samp_df <- target_type_sims(x_size = x_size,
                                    y_size = y_size,
                                    wt_mat,
                                    n_samples = rep(1000, 2)) |>
            mutate(type = type |>
                       map(\(x) c("bacteria", "virus", "none")[x]) |>
                       map_chr(\(x) paste(x, collapse = " + ")) |>
                       factor(levels = c("bacteria", "virus", "bacteria + virus", "none")))
        samp_df |>
            filter(map_lgl(type, \(x) !is.null(x))) |>
            ggplot(aes(x, y, color = type)) +
            geom_point(size = 0.5) +
            scale_color_manual(NULL, values = type_pal) +
            coord_equal(xlim = c(0, x_size), ylim = c(0, y_size)) +
            guides(color = guide_legend(override.aes = list(size = 3))) +
            ggtitle(n) +
            theme(axis.title = element_blank(),
                  axis.text = element_blank(),
                  axis.ticks = element_blank())
    }) |> 
    c(list(nrow = 2, guides = "collect")) |> 
    do.call(what = wrap_plots)



```


### Searchers {#sec-searchers}

When far from all targets, searchers move a set distance ($d$) in a random 
direction each time step:
$$
\begin{split}
x_{t+1} &= x_{t} + d \cos(\theta_{r}) \\
y_{t+1} &= y_{t} + d \sin(\theta_{r}) \\
\theta_{r} &\sim {\text{U}}(0, 2 \pi)
\end{split},
$${#eq-random-walk}
where
$x_{t}$ and $y_{t}$ indicate searcher location at time $t$,
and $\theta_r$ is the random turn angle in radians.
In both random and directed movement, if searcher movement would cause them 
to move outside the landscape, they reflect off the x and y bounds instead.


When a searcher's distance between itself and target $i$ ($l_i$) is
less than target $i$'s directed-movement threshold ($l_{\star,i}$), 
the target influences searcher movement according to the bias 
it exerts on searchers:
$$
\begin{split}
x_{t+1} &= x_{t} + (1 - |b_i|) \, \ddot{\Delta}{x} + |b_i| \, \vec{\Delta}{x} \\
y_{t+1} &= y_{t} + (1 - |b_i|) \, \ddot{\Delta}{y} + |b_i| \, \vec{\Delta}{y}
\end{split},
$$ {#eq-bias}
where 
$\ddot{\Delta}{x}$ and $\ddot{\Delta}{y}$ indicate changes in location via 
entirely random movement ($\ddot{\Delta}{x} = d \cos(\theta_r)$ and 
$\ddot{\Delta}{y} = d \sin(\theta_r)$ from @eq-random-walk),
$\vec{\Delta}{x}$ and $\vec{\Delta}{y}$ indicate entirely directed movement
(defined in @eq-one-lstar below),
$| \cdot |$ indicates absolute value,
and
$b_i$ indicates bias for target $i$ and can range from $-1$ to $+1$.
Biases near zero result in mostly random movement, whereas values near
$-1$ or $+1$ result in mostly directed movement.
Negative $b_i$ indicates repellent effects on searchers, and
positive values indicate attractant effects.

The sign of $b_i$ comes into play in the directed portion of movement.
Directed movement toward or away from target $i$ is
$$
\begin{split}
\delta_i &= 
    \begin{cases}
        l_i, & \text{if } b_i > 0 \text{ and } l_i < d \\
        d,   & \text{otherwise}
    \end{cases} \\
\theta_i &= \text{atan2}\left[\text{sgn}(b_i) \left( \vec{y}_i - y_t \right), \; \text{sgn}(b_i) \left( \vec{x}_i - x_t \right) \right] \\
\vec{\Delta}{x} &= \delta_i \, \cos(\theta_i) \\
\vec{\Delta}{y} &= \delta_i \, \sin(\theta_i) \\
\end{split},
$${#eq-one-lstar}
where
$\text{atan2}$ is the 2-argument arctangent function
and
$\vec{x}_i$ and $\vec{y}_i$ indicate the location of target $i$.
This approach causes searchers to move away from targets when $b_i < 0$ and
toward them when $b_i > 0$.
It also prevents a searcher from overshooting a target it's moving toward
when the searcher step size exceeds the distance between searcher 
and target.
If multiple targets are within their values of $l_{\star}$ of the 
searcher (but not close enough to interact), then the target with the
greater absolute bias ($|b|$) is the only target that affects searcher movement.
If both targets have the same $|b|$, then the closer target is chosen.
In the rare event where they also share the same distance, then a
target is chosen at random.


<!-- Searchers can be influenced by multiple targets, in which -->
<!-- case directed movement is weighted by each target's magnitude of bias, $|b_i|$. -->
<!-- For a vector containing all indices for targets within their directed-movement -->
<!-- threshold of the searcher ($\mathbf{R}$), directed movement is as follows: -->
<!-- $$ -->
<!-- \begin{split} -->
<!-- \mathbf{R} &= \left\{\text{ all } i \text{ such that } l_i \le l_{\star,i} \right\} \\ -->
<!-- |b| &= \max_{i \in \mathbf{R}}\left( | b_i | \right) \\ -->
<!-- \vec{\Delta}{x} &= \sum_{i \in \mathbf{R}}{\left( \omega_i \, \vec{\Delta}{x}_i \right)} \\ -->
<!-- \vec{\Delta}{y} &= \sum_{i \in \mathbf{R}}{\left( \omega_i \, \vec{\Delta}{y}_i \right)} \\ -->
<!-- \omega_i        &= \frac{|b_i|}{ -->
<!--     \sum\limits_{j \in \mathbf{R}}{ |b_j| }} -->
<!-- \end{split}, -->
<!-- $$ {#eq-mult-lstars} -->
<!-- where -->
<!-- $l_i$ is the distance from the searcher to nearby target $i$, -->
<!-- and -->
<!-- $\vec{\Delta}{x}_i$ and $\vec{\Delta}{y}_i$ indicate entirely directed movement  -->
<!-- toward nearby target $i$ (@eq-one-lstar). -->



A searcher interacts with target $i$ when $l_i \le l_{\circledast,i}$,
and $l_{\circledast,i}$ can also vary among targets.
After this interaction occurs, the searcher can optionally stay at target $i$
for $n_s$ time steps, during which time the searcher will move directly
toward the target.
Afterward, the searcher can optionally ignore target $i$ for $n_g$ time steps.




```{r}
#| label: tbl-parameters
#| tbl-cap: "Parameters in the model with descriptions."
#| echo: false

tribble(
    ~ Name, ~ Description,
    "$x_{\\text{size}}$", "Size of landscape in x dimension",
    "$y_{\\text{size}}$", "Size of landscape in y dimension",
    "$x_t$", "x coordinate of searcher at time $t$",
    "$y_t$", "y coordinate of searcher at time $t$",
    "$d$", "Distance searchers move per time step",
    "$\\theta_r$", "Random-walk turn angle in radians",
    "$l_i$", "Distance between searcher and target $i$",
    "$l_{\\star,i}$", paste("Threshold for target $i$ within which searchers",
                            "are biased by it"),
    "$b_i$", paste("Bias for target $i$ ($b_i \\in \\left[ -1,1 \\right]$);",
                   "values near 0 are closer to a random walk; negative",
                   "values repel, while positive values attract"),
    "$\\vec{x}_i$", "x coordinate for target $i$",
    "$\\vec{y}_i$", "y coordinate for target $i$",
    "$l_{\\circledast,i}$", "Threshold for target $i$ within which searchers interact with it",
    "$n_s$", "Number of time steps searchers interact with a target",
    "$n_g$", "Number of time steps searchers ignore a target after interacting"
    ) |> 
    kbl(escape = FALSE, booktabs = TRUE, linesep = "\\addlinespace") |> 
    column_spec(2, "5.5in")
```



## Simulations


```{r}
#| label: basic-sims
#| animation-hook: gifski




# if (output_format == "pdf")


```

